factorial(n) / factorial(n-k)
}
c(52, 5)
16*64
90/1024
90/3
1024/3
1024/6
1024/9
512/3
512/9
120*075^5
120*0.75^5
0.75^5
5*0.25*0.75
1/16
binom <- function(n, p, r) {
c <- factorial(n) / (factorial(r)*factorial(n-r))
c * p^r * (1-p)^(n-r)
}
binom(5, 0.25, 2)
binom(10, 0.25, 5)
?binom
binom(100, 0.1, 8)
binom(100, 0.1, 5)
binom(100, 0.025, 5)
binom(100, 0.1, 8)
poi <- function (r, l) {
2.71828^(-l) * l^r / factorial(r)
}
poi(100, 0.1, 8)
poi(8, 2.5)
poi(8, 10)
binom(10, 0.3, 1)
binom(10, 0.3, 2)
binom(10, 0.3, 1) +
binom(10, 0.3, 2)
binom(10, 0.3, 3)
2.718^-1
0.8^3*0.2
0.8^3
0.8^3 - 0.2
5^2
f <- function (x) {
(x^2 + 7*x + 10) / (x + 5)
}
##    (x + 5)(x + 2) = x^2 + 7*x + 10
##
## HYPOTHESIS, that the limit of f(x) = 7 as x approaches -5
xs <- c(5.1, 5.01, 5.001, 5.0001, 5.00001)
f(xs)
L <- 7
f(x) - 7
L <- 7
f(xs) - 7
f <- function (x) {
(x^2 + 7*x + 10) / (x + 5)
}
##    (x + 5)(x + 2) = x^2 + 7*x + 10
##
## HYPOTHESIS, that the limit of f(x) = 7 as x approaches -5
xs <- c(5.1, 5.01, 5.001, 5.0001, 5.00001)
t1 <- f(xs)
## looks like we are right :)
## lets, take a slightly different approach and see if the delta approaches zero:
## assume: L = 7
L <- 7
t2 <- f(xs) - 7
## lets plot these
plot(t1)
plot(x=xs, y=t1)
plot(x=xs, y=t2)
plot(y=xs, x=t2)
xs <- c(-5.1, -5.01, -5.001, -5.0001, -5.00001)
t1 <- f(xs)
t1
L <- 7
t2 <- f(xs) - 7
## assume: L = 7
L <- -3
t2 <- f(xs) - L
plot(y=xs, x=t2)
t2
install.packages("manipulate")
install.packages("manipulate")
install.packages("manipulate")
install.packages("rcharts")
install.packages("knitr")
install.packages("maps")
install.packages("mapdata")
install.packages("Manipulate")
library("manipulate", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
library(sqldf)
install.packages("sqldf")
install.packages("ddply")
install.packages("dply")
install.packages("plyr")
library(manipulate)
?manipulate
?slider
?manipulate
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s=slider(0, 2, step=0.1))
manipulate(myPlot(s), x.s=slider(0, 2, step=0.1))
manipulate(myPlot, x.s=slider(0, 2, step=0.1))
manipulate(myPlot, s=slider(0, 2, step=0.1))
manipulate(myPlot(s), x.s=slider(0, 2, step=0.1))
?slider
manipulate(myPlot(s), slider = x(0, 2, step=0.1))
manipulate(myPlot(s), x.s=slider(0, 2, step=0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s=slider(0, 2, step=0.1))
manipulate(myPlot(5), x.s=slider(0, 2, step=0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s=slider(0, 2, step=0.1))
manipulate(myPlot(s), s=slider(0, 2, step=0.1))
install.packages("shiny")
library(ggplot2)
testData <- data.frame (  normal = floor(rnorm(100000, mean = 100, sd = 5)), bimodal = rpois(100000, c(30, 500))  )
qplot(normal, data=testData, geom="histogram", fill=..count..) + ggtitle("Normally Distributed Data")
qplot(bimodal, data=testData, geom="histogram", fill=..count.., binwidth=2) + ggtitle("Bimdal Test Data")
library(RODBC)
conn <- odbcConnect("R-SQL-connect")
testData$noiseX <- runif(100000, min = -100, max = 10000)
testData$noiseY <- runif(100000, min = -100, max = 10000)
testData$noiseZ <- runif(100000, min = -100, max = 10000)
## switch context to sqlLab
sqlQuery(conn, "use sqlLab")
sqlSave(conn, testData, tablename="testData")
sqlQuery(conn, "SELECT TOP(5) * from testData")
odbcClose(conn)
qplot(normal, data=testData, geom="histogram", fill=..count.., biinwidth=2) + ggtitle("Normally Distributed Test Data")
qplot(normal, data=testData, geom="histogram", fill=..count.., binwidth=2) + ggtitle("Normally Distributed Test Data")
qplot(normal, data=testData, geom="histogram", fill=..count.., binwidth=1) + ggtitle("Normally Distributed Test Data")
qplot(bimodal, data=testData, geom="histogram", fill=..count.., binwidth=2) + ggtitle("Bimodal Test Data")
qplot(normal, data=testData, geom="histogram", fill=..count.., binwidth=1) + ggtitle("Normally Distributed Test Data")
qplot(bimodal, data=testData, geom="histogram", fill=..count.., binwidth=2) + ggtitle("Bimodal Test Data")
testData$bimodal[testData$bimodal = 310]
testData$bimodal[testData$bimodal == 310]
testData$bimodal[testData$bimodal == 500]
testData$bimodal[testData$bimodal > 600]
testData[testData$bimodal > 600, ]
library(manipulate)
#library(UsingR)
data(galton)
library(datasets)
data(galton)
data(Galton)
library(HistData)
install.packages("HistData")
data(galton)
library(HistData)
data(galton)
data(Galton)
myHist <- function(mu){
hist(Galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((Galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("rTools")
install.packages("rtools")
install.packages("rtools")
install.packages("devtools")
install.packages("rtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github('slidifyLibraries', 'ramnathv')
?opt_chunks
library(knitr)
?opt_chunks
??opt_chunks
xs <- c(1, 1)
?seq
s <- seq(1, 5, 0.5)
s
xs * s
xs <- (180, 90)
xs <- c(180, 90)
y <- seq(0, 5, 0.25)
xs*y
y <- c(seq(0, 5, 0.25), seq(0, 5, 0.25))
xs*y
xs+y
xs <- list()
?xs
?list
list(1, 2, 3) + list(2)
list(1, 2, 3) + list(2, 3, 4)
list(c(1, 2, 3)) + list(c(2, 3, 4))
x <- data.frame()
x <- rbind(x, data.frame(ta=1, td=2, tw=3))
x
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
?dataTableOutput
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
math <- function() {
add <- function(x, y) {
return (x + y)
}
}
math.add(2, 3)
math <- list(
add <- function(x, y) {
return (x + y)
}
)
ath$add(2, 3)
math$add(2, 3)
math$add
math <- function (x, y) {}
add <- function(x, y) {
return (x + y)
}
return (add(x, y))
}
math <- function (x, y) {
add <- function(x, y) {
return (x + y)
}
return (add(x, y))
}
math(2, 3)
c(c(1, 2, 3), c(1))
c(c(1, 2, 3), 3
)
x <- 1
y <- 7
x<-1
y<-7
while ((x < 5) & (y < 10)) {
x
y
x <- x + 1
y <- y + 1
}
c <- c()
x<-1
y<-7
while ((x < 5) & (y < 10)) {
c <- c(c, x)
x <- x + 1
y <- y + 1
}
c
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
shiny::runApp('C:/DataSciToolkit/myGits/Calculating-WBGT/relaxation_Tw/working_code')
?rnorm
sd(1:6)
## Simulate the probability of getting a 5 when you roll a dice.
# going to run an experiment with 100 die rolls, and see the percentage of 5's with each roll.
p100 <- rnorm(100, mean=3.6, sd=1.87)
plot(p100)
## Simulate the probability of getting a 5 when you roll a dice.
# going to run an experiment with 100 die rolls, and see the percentage of 5's with each roll.
p100 <- rnorm(100, mean=3.6, sd=1)
plot(p100)
?round
## Simulate the probability of getting a 5 when you roll a dice.
# going to run an experiment with 100 die rolls, and see the percentage of 5's with each roll.
p100 <- rnorm(100, mean=3.6, sd=1)
p100 <- floor(p100)
plot(p100)
## Simulate the probability of getting a 5 when you roll a dice.
# going to run an experiment with 100 die rolls, and see the percentage of 5's with each roll.
p100 <- rnorm(100, mean=3.6, sd=1)
p100 <- floor(p100)
plot(p100)
## Simulate the probability of getting a 5 when you roll a dice.
# going to run an experiment with 100 die rolls, and see the percentage of 5's with each roll.
p100 <- rnorm(100, mean=3.6, sd=1)
p100 <- floor(p100)
plot(p100)
?rnorm
## Simulate the probability of getting a 5 when you roll a dice.
# going to run an experiment with 100 die rolls, and see the percentage of 5's with each roll.
p100 <- rnorm(100, mean=3.6, sd=1)
p100 <- floor(p100)
plot(p100)
outcomes <- data.frame(index=c(1:100), toss=p100)
binom <- function (n, p, k) {
return (
factorial(n) / (factorial(k) * factorial(n-k)) * (p**k) * ((1-p)**(n-k))
)
}
binom (50, 0.5, 25)
binom <- function (n, p, k) {
return (
factorial(n) / (factorial(k) * factorial(n-k)) * (p**k) * ((1-p)**(n-k))
)
}
binom (400, 0.2, 50)
0.93**10
1 - 0.93**10
(0.3*0.5) / ((0.3*0.5) + (0.7*0.25))
0.28*160
sqrt(44.8*(0.72))
?qnorm
qnorm(50, mean=44.8, sd=5.679437)
qnorm(50, mean=44.8, sd=5.68)
data <- rnorm(1000, mean=44.8, sd=5.68)
quantile(data)
11/12
400 * 4.2 * 10
savings <- 175 * 4.2 * 17
savings
rent <- 340 * 52
food <- 120 * 42
rent
food
32000 * 10/12
400 * 4.2 * 10
rent <- 340 * 52
food <- 120 * 42
bills <- 300 * 10
rent + food + bills
savings
savings + 4500
expenses <- (rent + food + bills)*1.1
expenses
(3.5 * 4.2 * 175) + 1403 + 888
s2015 <- 52 * 172
s2015
s2015 <- 52 * 175
s2015
s2015 <- 52 * 250
s2015
difftime(strptime("01.10.2014", format = "%d.%m.%Y"),
strptime("31.12.2015", format = "%d.%m.%Y"),units="weeks")
projected_savings <- data.frame(pot = c(1:65)*175)
projected_savings
head(projected_savings)
projected_savings <- data.frame(pot = c(2500, c(1:65)*175))
head(projected_savings)
projected_savings <- data.frame(pot = c(1:65)*175+2500)
projected_savings <- data.frame(pot = c(1:65)*175+2500)
head(projected_savings)
tail(projected_savings)
library(ggplot2)
p <- ggplot(savings, aes(x=c(1:65), y=forecasted)) + geom_line()
savings <- data.frame(pot = c(2500), forecasted = c(1:65)*175+2500)
p <- ggplot(savings, aes(x=c(1:65), y=forecasted)) + geom_line()
p
avings <- data.frame(pot = c(2500), forecasted = c(1:65)*(175*interest)+2500)
p <- ggplot(savings, aes(x=c(1:65), y=forecasted)) + geom_line()
p
head(savings)
c(1.00:5.00)
savings <- data.frame(pot = c(2500), forecasted = c(1.00:65.00)*(175.00*1.04)+2500.00)
p <- ggplot(savings, aes(x=c(1:65), y=forecasted)) + geom_line()
p
head(savings)
p <- ggplot(savings, aes(x=c(1:65), y=forecasted)) + geom_line(color="blue")
p
p <- ggplot(savings, aes(x=c(1:65), y=forecasted)) + geom_line(color="blue", width=2)
p
savings <- data.frame(pot = c(2500), forecasted = c(1.00:65.00)*175+2500.00)
p <- ggplot(savings, aes(x=c(1:65), y=pot)) + geom_bar(stat="identity", alpha=0.6) + geom_line(savings, aes(x=c(1:65), y=forecasted), color="blue")
p
ggplot(savings, aes(x=c(1:65), y=pot)) + geom_bar(stat="identity", alpha=0.6)
ggplot(savings, aes(x=c(1:65), y=c(pot:65-length(pot))) +
geom_bar(stat="identity", alpha=0.6)
ggplot(savings, aes(x=c(1:65), y=c(pot, rep(0, 65-length(pot)))) +
geom_bar(stat="identity", alpha=0.6)
c(pot, rep(0, 65-length(pot)))
c(2500, rep(0, 65-length(pot)))
p2 = c(2500)
c(p2, rep(0, 65-length(p2)))
ggplot(savings, aes(   x=c(1:65)
, y=c(pot, rep(0, 65-length(pot)))
) +
geom_bar(stat="identity", alpha=0.6)
)
ggplot(savings, aes(   x=c(1:65)
, y=c( pot, rep(0, 65-length(pot))))
) +  geom_bar(stat="identity", alpha=0.6)
xx <- c(p2, rep(0, 65-length(p2)))
ggplot(savings, aes(   x=c(1:65)
, y=xx)
) +  geom_bar(stat="identity", alpha=0.6)
savings <- data.frame(  pot = c(2500)
, forecasted = c(1.00:65.00)*175+2500.00)
savings$future <- c( savings$pot, rep(0, 65 - length(savings$pot)))
head(savings)
savings <- data.frame(  pot = c(2500)
, forecasted = c(1.00:65.00)*175+2500.00)
head(savings)
savings <- data.frame(  pot = 2500
, forecasted = c(1.00:65.00)*175+2500.00)
head(savings)
setwd("C:/Users/earth/Desktop")
listfiles(".")
setwd("C:/Users/earth/Desktop")
list.files()
din <- read.csv("01_Auckland_Central.csv")
din <- load(url("http://www.electionresults.govt.nz/electorate-1.html"))
read.table.url("http://www.electionresults.govt.nz/electorate-1.html")
scan.url("http://www.electionresults.govt.nz/electorate-1.html")
library(scan)
url.show("http://www.electionresults.govt.nz/electorate-1.html")
library(XML)
install.packages("XML")
library(XML)
electURL <- "http://www.electionresults.govt.nz/electorateindex.html"
elecDOC <- htmlTreeParse(elecURL, useInternalNodes = TRUE)
electDOC <- htmlTreeParse(electURL, useInternalNodes = TRUE)
electorates <- xpathSApply(electDOC, "//a[contains(@href,'electorate')]", xmlValue)
head(electorates)
electorates <- xpathSApply(electDOC, "//a[contains(@href,'electorate-')]", xmlValue)
head(electorates)
length(electorates)
links <- xpathSApply(electDOC, '//a/@href')
head(links)
links[grep("electorate-", links$href)]
links[grep("electorate-", "href")]
links["href"]
links
links["href",]
links[1]
links[2]
links[grep("electorate-", links)]
length(links[grep("electorate-", links)])
filteredLinks <- grep("electorate-", xpathSApply(electDOC, '//a/@href'))
head(filteredLinks)
# 1. Extract full HTML document
electURL <- "http://www.electionresults.govt.nz/electorateindex.html"
electDOC <- htmlTreeParse(electURL, useInternalNodes = TRUE)
# 2. Use XQuery to extract the Electorate names from the hyperlinks
electorates <- xpathSApply(electDOC, "//a[contains(@href,'electorate-')]", xmlValue)
# 3. Extract the hyperlinks themselves, but only those for the elcetorate data
#    The electorate data links all have a pattern like: 'electorate-XX.html'
#    We will filter based on a pattern like: 'electorate-' using grep
#
# NOTE: grep creates a ordinal index where TRUE. So we are filtering all links
#       based on their position in the vector which coincide with the 'electorate-' pattern
rawLinks <- xpathSApply(electDOC, '//a/@href')
electLinks <- rawLinks[grep("electorate-", rawLinks)]
?paster
?paste
paste(c("a", "b", "c"), ".html", sep="/")
paste("http://", c('a', 'b', 'c'))
paste("http://", c('a', 'b', 'c'), sep='')
data <- data.frame()
names(data) <- c("PartyName", "PartyVotes", "CandidateName", "CandidateParty", "CandidateVotes")
data <- data.frame("PartyName", "PartyVotes", "CandidateName", "CandidateParty", "CandidateVotes")
data
data <- data.frame(c("PartyName", "PartyVotes", "CandidateName", "CandidateParty", "CandidateVotes"))
data
data <- data.frame()
data <- cbind(data, c(1, 2, 3, 4, 5))
data <- data.frame("PartyName" = c(), "PartyVotes" = c(), "CandidateName" = c(), "CandidateParty" = c(), "CandidateVotes" = c())
data
data <- cbind(data, c(1, 2, 3, 4, 5))
data <- data.frame(PartyName = c(), PartyVotes = c(), CandidateName = c(), CandidateParty = c(), CandidateVotes = c())
data
data <- cbind(data, c(1, 2, 3, 4, 5))
testURL <- "http://www.electionresults.govt.nz/electorate-68.html"
testDOC <- htmlTreeParse(testURL, useInternalNodes=T)
library(XML)
testURL <- "http://www.electionresults.govt.nz/electorate-68.html"
testDOC <- htmlTreeParse(testURL, useInternalNodes=T)
testURL <- "http://www.electionresults.govt.nz/electorate-68.html"
testDOC <- htmlTreeParse(testURL, useInternalNodes=F)
testURL <- "http://www.electionresults.govt.nz/electorate-68.html"
testDOC <- htmlTreeParse(testURL, useInternalNodes=TRUE)
htmlParse(testURL)
htmlParse(testURL asText=TRUE)
htmlParse(testURL, asText=TRUE)
electURL <- "http://www.electionresults.govt.nz/electorateindex.html"
electDOC <- htmlTreeParse(electURL, useInternalNodes = TRUE)
library(XML)
setwd("C:\\DataSciToolkit\\myGitHub\\nzelections2014\\data_extraction")
electURL <- "http://www.electionresults.govt.nz/electorateindex.html"
electDOC <- htmlTreeParse(electURL, useInternalNodes = TRUE)
